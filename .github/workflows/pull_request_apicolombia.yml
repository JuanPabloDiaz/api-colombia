name: Build and test - ApiColombia

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api.Tests

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build with dotnet
        run: dotnet build --configuration Release --no-restore

      - name: Run tests with coverage
        run: dotnet test --no-build --configuration Release --settings ./coverlet.runsettings --collect:"XPlat Code Coverage" --logger trx --results-directory ../TestResults /p:CollectCoverage=true /p:CoverletOutput=../TestResults/coverage/ /p:CoverletOutputFormat=cobertura /p:MergeWith=../TestResults/coverage/coverage.json
      
      - name: Verify coverage file exists
        working-directory: ./
        run: |
          echo "Current directory: $(pwd)"
          echo "Looking for coverage file at: $(pwd)/TestResults/coverage/coverage.cobertura.xml"
          ls -la TestResults/coverage/ || echo "Directory listing failed"
          [ -f TestResults/coverage/coverage.cobertura.xml ] || (echo "##[error]Coverage file not found in $(pwd)/TestResults/coverage/" && exit 1)
      
      - name: Generate HTML report
        working-directory: ./
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.10
          reportgenerator \
            -reports:TestResults/coverage/coverage.cobertura.xml \
            -targetdir:CoverageReport \
            -reporttypes:HtmlInline_AzurePipelines
      
      - name: Extract Coverage
        working-directory: ./
        id: coverage
        run: |
          # Get the last line containing "Line coverage" from test output
          COVERAGE=$(grep -oP "Line coverage: \K\d+\.\d+" TestResults/coverage/coverage.cobertura.xml)
          echo "coverage_percentage=${COVERAGE%.*}" >> $GITHUB_OUTPUT
          echo "Coverage: ${COVERAGE%.*}%"

      - name: Upload Coverage Metadata
        uses: actions/upload-artifact@v4
        with:
          name: coverage-meta
          path: TestResults/coverage/coverage.cobertura.xml

      - name: Publish coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: CoverageReport

      - name: Publish test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults